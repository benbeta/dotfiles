:"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
  " => General 
" sdjf<
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:scala_use_default_keymappings = 0
execute pathogen#infect()
" Sets how many lines of history VIM has to remember
set history=70
" Enable filetype plugins
filetype plugin on
filetype indent on
"unfolded is default
set foldlevel=99
let g:tagbar_type_perl = {
    \ 'ctagstype' : 'perl',
    \ 'kinds'     : [
    \ 'p:packages',
    \ 'o:ours',
    \ 'c:constants',
    \ 'f:formats',
    \ 'l:labels',
    \ 's:subroutines',
    \ 'x:xlosures',
    \ ]
\ }
" Set to auto read when a file is changed from the outside
set autoread

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","

let g:mapleader = ","
command! -nargs=1 Silent
\ | execute ':w'
\ | execute <q-args>
\ | execute ':silent !'.<q-args>
\ | execute ':redraw!'
    "\ | execute ':silent !tmux send-keys -t 0:0 make Enter'
    "\ | execute <q-args>
    "\ | execute ':silent !'.<q-args>
    "\ | execute ':redraw!'


" A wrapper function to restore the cursor position, window position,
" and last search after running a command.
function! Preserve(command)
      " Save the last search
      let last_search=@/
      " Save the current cursor position
      let save_cursor = getpos(".")
      " Save the window position
      normal H
      let save_window = getpos(".")
      call setpos('.', save_cursor)

      " Do the business:
      execute ':wa'
      execute  a:command 
      "execute ':silent !'. a:command


      " Restore the last_search
      let @/=last_search
      " Restore the window position
      call setpos('.', save_window)
      normal zt
      " Restore the cursor position
      call setpos('.', save_cursor)
endfunction



nmap <c-c> <esc>:w<cr>
imap <c-c> <esc>:w<cr>
nmap <leader>, <esc>:w<cr>
imap <leader>, <esc>:w<cr>

    "nmap <silent> <leader>r <esc>:call Preserve("make -f Makefile.mk run")<cr><cr>
"
"nmap <silent> <leader>R <esc>:call Preserve("make -f Makefile.mk run")<cr>
"nmap <silent> <leader>r <esc>:call system("make -f Makefile.mk run")<cr>
"nmap <F5>:call system("make -f Makefile.mk run")<cr>
"imap <F5> <esc>:w \| call system("make -f Makefile.mk run")<cr>
" stay in insert mode
"imap <F5> <c-o>:w<CR><c-o>:call system("make -f Makefile.mk run")<cr>
inoremap <F4> <c-o>:w<cr>

"noremap <F5>:w<cr>

"nmap <c-r> <esc>:silent! make run<cr>

"imap <c-r> <esc>:call Preserve("make -f Makefile.mk run")<cr>
"imap <leader>r <esc>:call Preserve("make -f Makefile.mk run")<cr><cr>

"imap <c-t> <esc>:call Preserve("make -f Makefile.mk test")<cr>
"nmap <c-t> <esc>:call Preserve("make -f Makefile.mk test")<cr>

"nmap <leader>r <esc>:call system("make -f Makefile.mk run")<cr><cr>
noremap <c-r> <esc>:call system("make -f Makefile.mk run")<cr>
inoremap <c-r> <esc>:w<cr>:call system("make -f Makefile.mk run")<cr>
"imap <leader>r <esc>:call system("make run")<cr>

"nmap <c-e> <esc>:Silent make eval<cr>

"imap <c-te> <esc>:Silent make eval<cr>
" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases 
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch


" Enable syntax highlighting
syntax enable
au BufNewFile,BufRead *.msh set filetype=scheme
au BufNewFile,BufRead *.l set filetype=scheme
au BufNewFile,BufRead *.nl set filetype=scheme
au BufNewFile,BufRead,BufReadPost *.rkt,*.rktl,*.rktd set filetype=scheme

au BufNewFile,BufRead *.lp set filetype=noweb


colorscheme desert
set background=dark

"tab titles
function! GuiTabLabel()
    return substitute( expand( '%:p' ), '.\+\/\(.\+\)\/.\+', '\1', '' )
endfunction
" Set extra options when running in GUI mode
if has("gui_running")
    set guifont=Monaco:h14
    set guioptions-=T
    set guioptions+=e
    set t_Co=256
    set guitablabel=%{GuiTabLabel()}
    "set guitablabel=%M\ %t
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
"set smarttab
"set smartindent
set tabstop=4
set shiftwidth=4
set expandtab

" 1 tab == 4 spaces

" Linebreak on 500 characters
set lbr
set tw=501

set ai "Auto indent
set wrap "Wrap lines


map <C-W>a <C-W>j
map <C-W>W <C-W>k
" Smart way to move between windows
"map <C-a> <C-W>j
"map <C-k> <C-W>k
"map <C-h> <C-W>h
"map <C-l> <C-W>l
" resize window CTRL+(h|j|k|l)
"noremap <A-a> :resize +1<CR>
noremap å :resize +1<CR>
noremap ˚ :resize -1<CR>
noremap ˙ :vertical resize -1<CR>
noremap ¬ :vertical resize +1<CR>

noremap <silent> f :call Preserve("! sh $HOME/hob/bin/vimhob")<CR><cr>


" working with tabs
" " tab navigation like firefox
nnoremap <C-S-tab> :tabprevious<CR>
nnoremap <C-tab>   :tabnext<CR>
"nnoremap <C-t>     :tabnew<CR>
inoremap <C-S-tab> <Esc>:tabprevious<CR>i
inoremap <C-tab>   <Esc>:tabnext<CR>i
"inoremap <C-t>     <Esc>:tabnew<CR>

""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" Format the status line
"set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

nnoremap j a
vnoremap j a
nnoremap a j
vnoremap a j
"imap <c-a> <esc>ai
"imap <c-k> <esc>ki
"imap <c-h> <esc>hi
"imap <c-l> <esc>l i
"imap <c-x> <esc>x i
"imap <c-u> <esc>u i
"imap <c-A> <esc>A
"imap <c-w> <esc>:w<CR>
"imap <c-d> <esc>ddi
"imap <c-o> <esc>o
"
" insert mode
"imap <C-b> <Left>
"imap <C-f> <Right>
"imap <C-a> <C-o>:call <SID>home()<CR>
"imap <C-e> <End>
"imap <M-b> <C-o>b
"imap <M-f> <C-o>e<Right>
"imap <C-d> <Del>
"imap <C-h> <BS>
"imap <M-d> <C-o>de
"imap <M-h> <C-w>
"imap <C-k> <C-r>=<SID>kill_line()<CR>
"" cmd mode
"cmap <C-a> <Home>
"cmap <C-e> <End>
"cmap <M-b> <S-Left>
"cmap <M-f> <S-Right>

function! s:home()
  let start_col = col('.')
  normal! ^
  if col('.') == start_col
    normal! 0
  endif
  return ''
endfunction

function! s:kill_line()
  let [text_before_cursor, text_after_cursor] = s:split_line_text_at_cursor()
  if len(text_after_cursor) == 0
    normal! J
  else
    call setline(line('.'), text_before_cursor)
  endif
  return ''
endfunction

function! s:split_line_text_at_cursor()
  let line_text = getline(line('.'))
  let text_after_cursor  = line_text[col('.')-1 :]
  let text_before_cursor = (col('.') > 1) ? line_text[: col('.')-2] : ''
  return [text_before_cursor, text_after_cursor]
endfunction

" shortcuts to ESC
"ino ,, <esc>
"cno ,, <c-c>
vno v <esc>


set nu

" scala

"Hello world! 
" single char insert (atomic)
" http://stackoverflow.com/questions/1557893/making-inserting-a-single-character-in-vim-an-atomic-operation
noremap <silent> <space> :exe "normal i".nr2char(getchar())<CR>

au BufRead,BufNewFile *.nw    set filetype=noweb

if filereadable(".vimrc_local")
    so .vimrc_local
else
    if filereadable("../.vimrc_local")
         so .vimrc_local
    endif
endif

let g:slimv_swank_cmd = '!osascript -e "tell application \"Terminal\" to do script \"sbcl --load ~/.vim/bundle/slime/slime/start-swank.lisp\""'

" working with tags
" following a tag
nnoremap <Enter> <c-]>
nnoremap <bs> <esc>:pop <cr>

" taglist setting for noweb (look in ~/.ctags)
let tlist_noweb_settings = 'noweb;d:definition'
nmap <leader>t <esc>:TlistToggle<cr>

" For syntax/noweb.vim
au BufNewFile,BufRead *.nw set filetype=noweb
au BufNewFile,BufRead *.lp set filetype=noweb
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
let noweb_backend = "markdown"
let noweb_language = "perl"
let noweb_fold_code = 0


" mac os x clipboard copy/paste
set clipboard=unnamed
